openapi: 3.0.0
info:
  title: Secure API Middleware
  version: 1.0.0
  description: API Documentation for your backend

servers:
  - url: http://localhost:8000

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Registered successfully

  /auth/login:
    post:
      summary: Login an existing user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login success

  /keys/generate:
    post:
      tags: [API Keys]
      summary: Generate a new API key
      security:
        - bearerAuth: []
        - csrfAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My API Key
      responses:
        '201':
          description: API key created successfully

  /keys/list:
    get:
      tags: [API Keys]
      summary: List all API keys for the authenticated user
      security:
        - bearerAuth: []
        - csrfAuth: []
      responses:
        '200':
          description: List of API keys

  /keys/status/{id}:
    patch:
      tags: [API Keys]
      summary: Toggle activation status of an API key
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key status toggled

  /keys/delete/{id}:
    delete:
      tags: [API Keys]
      summary: Delete an API key
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key deleted

  /api/countries:
    get:
      tags: [Country Data]
      summary: Fetch all countries (requires valid API key)
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: List of countries

  /users:
    get:
      tags: [User Management]
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
        - csrfAuth: []
      responses:
        '200':
          description: List of users

  /users/{id}:
    put:
      tags: [User Management]
      summary: Update a user (Admin only)
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                role:
                  type: string
                  enum: [USER, ADMIN]
      responses:
        '200':
          description: User updated

    delete:
      tags: [User Management]
      summary: Delete a user (Admin only)
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted

  /api/posts:
    get:
      tags: [Posts]
      summary: Get list of posts
      parameters:
        - name: country
          in: query
          schema:
            type: string
        - name: author
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of posts

    post:
      tags: [Posts]
      summary: Create a new post
      security:
        - bearerAuth: []
        - csrfAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                countryCode:
                  type: string
                visitDate:
                  type: string
                  format: date
                media:
                  type: string
                  format: binary
      responses:
        '201':
          description: Post created

  /api/posts/{id}:
    get:
      tags: [Posts]
      summary: Get a single post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post data

    put:
      tags: [Posts]
      summary: Update a post
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                countryCode:
                  type: string
                visitDate:
                  type: string
                  format: date
                media:
                  type: string
                  format: binary
      responses:
        '200':
          description: Post updated

    delete:
      tags: [Posts]
      summary: Delete a post
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted

  /api/posts/like/{id}:
    post:
      tags: [Likes]
      summary: Like or dislike a post
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_like:
                  type: integer
                  enum: [0, 1]
      responses:
        '200':
          description: Reaction saved

    delete:
      tags: [Likes]
      summary: Remove like/dislike
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Reaction removed

  /api/posts/comments/{postId}:
    get:
      tags: [Comments]
      summary: Get comments for a post
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments

    post:
      tags: [Comments]
      summary: Add a comment
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        '201':
          description: Comment added

  /api/posts/follow/{id}:
    post:
      tags: [Follows]
      summary: Follow a user
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Followed user

    delete:
      tags: [Follows]
      summary: Unfollow a user
      security:
        - bearerAuth: []
        - csrfAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unfollowed user

  /api/posts/followers/{id}:
    get:
      tags: [Follows]
      summary: Get list of followers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Followers list

  /api/posts/following/{id}:
    get:
      tags: [Follows]
      summary: Get list of following users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Following list

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    csrfAuth:
      type: apiKey
      in: header
      name: x-csrf-token
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
